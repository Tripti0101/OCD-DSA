ques1 ceil the floor 

pair<int, int> getFloorAndCeil(vector<int> &a, int n, int x) {
	pair<int, int> v={-1,-1};
	int low= 0;
	int high= n-1;
	while(low<=high){
		int mid= low+(high-low)/2;
		if(a[mid]==x){
			return {x,x};
		}
		else if (a[mid]<x){
			v.first = a[mid];
			 low= mid+1;
		}
		else{
			v.second = a[mid];
			 high= mid-1;
		}
	}
	return v;
}

//T.C=O(logn)
//S.C=O(1)

ques2 minimum in sorted rotated array 

class Solution {
public:
    int findMin(vector<int>& nums) {
        int n= nums.size();
        int minimum= nums[0];
        int low= 0;
        int high= n-1;
        while(high>=low){
            int mid= low+(high-low)/2;
            if(nums[low]<=nums[mid]) {
                minimum= min(minimum,nums[low]);
                low= mid+1;
            }
            else {
                minimum= min(minimum,nums[mid]);
                high= mid-1;
            }
        }
        return minimum;
    }  
};

//T.C=O(logn)
//S.C=O(1)

ques3 search in rotated sorted array 

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int n=nums.size();
        int low=0;
        int high=n-1;
        while(low<=high) {
            int mid=(low+high)/2;
            if(nums[mid]==target)
             return mid; 
            if(nums[mid]>=nums[low]) {
                if(nums[mid]>target&& nums[low]<=target) {
                     high=mid-1;
                }
                else {
                     low=mid+1;
                }
            }
            else {
                if(nums[mid]<target && nums[high]>=target){
                    low=mid+1;
                }
                    else{
                        high=mid-1;
                    }
            }
        }
        return -1;
    }
};

//T.C=O(logn)
//S.C=O(1)
