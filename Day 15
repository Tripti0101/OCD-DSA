ques1 kth element of two arrays 

class Solution {
  public:
    int kthElement(vector<int>& a, vector<int>& b, int k) {
        for(int i=0;i<b.size();i++){
            a.push_back(b[i]);
        }
        sort(a.begin(),a.end());
        return a[k-1];
    }
};

//T.C=O(log(m+n)^2)
//S.C=O(1)

ques2 search a 2D matrix 

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n=matrix[0].size();
        int low=0, high=m*n-1;
        while(low<=high) {
            int mid=low+(high-low)/2, row=mid/n, col=mid%n, midVal=matrix[row][col];
            if (midVal==target)
                return true;
            else if (midVal<target)
                low=mid+1;
            else
                high=mid-1;
        }
        return false;
    }
};

// T.C=O(log(m*n))
//S.C=O(1)

ques3 search 2d matrix-2

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m=matrix.size();
        int n=matrix[0].size();
        int row=0, col=n-1;
        while (row<m && col>=0) {
            if (matrix[row][col]==target)
                return true;
            else if (matrix[row][col]>target)
                col--;
            else
                row++;
        }
        return false;
    }
};

//T.C=O(log(m+n))
//S.C=O(1)
