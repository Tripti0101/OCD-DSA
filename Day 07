ques1 can place flowers

class Solution {
public:
    bool canPlaceFlowers(vector<int>& flowerbed, int n) {
        int count=0;
        int m= flowerbed.size();
        if(m==0)
         return false;
        if(n==0) 
         return true;
        if(m==1) {
            if(flowerbed[0]==0 && n<=1) 
            return true;
            if(flowerbed[0]==1 && n>0)
            return false;
        }
        if(flowerbed[0]==0 && flowerbed[1]==0) {
            flowerbed[0]=1;
            count++;
        }
        for(int i=1;i<m-1;i++) {
            if(flowerbed[i]==0 && flowerbed[i-1]==0 && flowerbed[i+1]==0) {
                flowerbed[i]=1;
                count++;
                i++;
            }
        }
        if(flowerbed[m-1]==0 && flowerbed[m-2]==0) {
            flowerbed[m-1]=1;
            count++;
        }
        if(count>=n) 
           return true;
        return false;
    }
};

//T.C=O(m)
//S.C=O(1)

ques2 minimum positive sum subarray 

class Solution {
public:
    int minimumSumSubarray(vector<int>& nums, int l, int r) {
        int n= nums.size();
        int miniSum= INT_MAX;
        bool found= false;
        for (int k=l;k<=r;++k) {
            int sum= 0;
            for (int i=0;i<n;++i) {
                sum+= nums[i];
                if (i>=k-1) {
                    if (sum>0) {
                        miniSum=min(miniSum,sum);
                        found=true;
                    }
                    sum-=nums[i-k+1];
                }
            }
        }
        if (found) 
            return miniSum;
        else 
            return -1;
    }
};

//T.C=O(n^2)
//S.C=O(1)
