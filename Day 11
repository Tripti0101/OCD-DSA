ques1 pascal's triangle 

class Solution {
public:
    vector<vector<int>> generate(int numRows) {
         vector<vector<int>> ans;
        vector<int>previous;
        for(int i=1;i<=numRows;i++){
            vector<int>current(i,1);
            for(int j=1;j<i-1;j++ ){
                current[j]=previous[j-1]+previous[j];
            }
            previous=current;
            ans.push_back(current);
        }
        return ans;
    }
};

//T.C=O(n^2)
//S.C=O(n^2)

ques2 rotate image 

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
          int n=matrix.size();
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                swap(matrix[i][j],matrix[j][i]);
            }
        }
        for(int i=0;i<n;i++){
        int j1=0,j2=n-1;
        while(j1<j2 && i<n){
            swap(matrix[i][j1],matrix[i][j2]);
            j1++;
            j2--;
        }
        }
            return ;
    }
};

//T.C=O(n^2)
//S.C=O(1)

ques3 spiral matrix 

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
         vector<int>v;
      int m=matrix.size();
      int n=matrix[0].size();
    int minr=0;
    int minc=0;
    int maxr=m-1;
    int maxc=n-1;
    while (minr <= maxr && minc <= maxc){
    for(int j=minc;j<=maxc;j++){
        v.push_back(matrix[minr][j]);
    }
    minr++;
    if(minr>maxr || minc>maxc)  break;
    for(int i=minr;i<=maxr;i++){
        v.push_back(matrix[i][maxc]);
    }
    maxc--;
     if(minr>maxr || minc>maxc)  break;
    for(int j=maxc;j>=minc;j--){
        v.push_back(matrix[maxr][j]);
    }
    maxr--;
     if(minr>maxr || minc>maxc)  break;
    for(int i=maxr;i>=minr;i--){
        v.push_back(matrix[i][minc]);
    }
    minc++;
    }
    return v;
    }
};

//T.C=(m*n)
//S.C=(m*n)
